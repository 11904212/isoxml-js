import { ElementCompact } from 'xml-js'

import { TAGS } from './constants'
import { ISOXMLManager } from '../ISOXMLManager'
import { registerEntityClass } from '../classRegistry'
import { fromXML, toXML } from '../utils'
{{#children}}
{{#ifnoteq className ../name }}
import { {{className}} } from './{{className}}'
{{/ifnoteq}}
{{/children}}

import { Entity, EntityConstructor, AttributesDescription{{#if includeReference}}, ISOXMLReference{{/if}} } from '../types'

{{#attributes}}
{{#if typeEnum}}
export const enum {{../name}}{{name}}Enum {
    {{#typeEnum}}
    {{name}} = '{{value}}',
    {{/typeEnum}}
}
{{/if}}
{{/attributes}}

export type {{name}}Attributes = {
{{#attributes}}
    {{#unless isPrimaryId}}
    {{name}}{{#if isOptional}}?{{/if}}: {{#if typeEnum}}{{../name}}{{name}}Enum{{else}}{{type}}{{/if}}
    {{/unless}}
{{/attributes}}
{{#children}}
    {{name}}?: {{className}}[]
{{/children}}
    ProprietaryAttributes?: {[name: string]: string}
    ProprietaryTags?: {[tag: string]: ElementCompact[]}
}

const ATTRIBUTES: AttributesDescription = {
    {{#attributes}}
    {{xmlName}}: { name: '{{name}}', type: '{{xsdType}}', isPrimaryId: {{toString isPrimaryId}} },
    {{/attributes}}
}
const CHILD_TAGS = {
    {{#children}}
    {{tag}}: { name: '{{name}}' },
    {{/children}}
}

export class {{name}} implements Entity {
    public tag = TAGS.{{name}}

    constructor(public attributes: {{name}}Attributes, public isoxmlManager: ISOXMLManager) {
    }

    static fromXML(xml: ElementCompact, isoxmlManager: ISOXMLManager, targetClass: EntityConstructor = {{name}}): Promise<Entity> {
        return fromXML(xml, isoxmlManager, targetClass, ATTRIBUTES, CHILD_TAGS)
    }

    toXML(): ElementCompact {
        return toXML(this, ATTRIBUTES, CHILD_TAGS)
    }
}

registerEntityClass(TAGS.{{name}}, {{name}})